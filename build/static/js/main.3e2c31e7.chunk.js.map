{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ServicesInns","props","data","inns","map","inn","react_default","a","createElement","className","Name","Location","Owner","Type","Notes","ServicesShops","shops","shop","Towns","console","log","towns","town","note","key","Country","Description","Services","Inns","Stores","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","notes","_this2","request","get","set","then","res","setState","body","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e2c31e7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './CSS/App.css';\nimport request from 'superagent';\n\n// https://reactjs.org/docs/lists-and-keys.html\n\n\nfunction ServicesInns (props) {\n    var data = props.data;\n        if (data != null ) {\n            const inns = data.map( (inn) =>\n              <ul className=\"noDec inns\">\n              <div className=\"Services\">\n                <li> {inn.Name} </li>\n                <li className=\"Location\"> Location: {inn.Location} </li>\n                </div>\n                <div className=\"iContent under\">\n                  <li> Owner: {inn.Owner} </li>\n                  <li> Quality: {inn.Type} </li>\n                  <li> Notes: {inn.Notes} </li>\n                </div>\n              </ul>\n            )\n            return <div> {inns} </div>\n        } else {\n            return <p> No Know Inns </p>\n        }\n}\n\nfunction ServicesShops (props) {\n    var data = props.data;\n        if (data != null ) {\n            const shops = data.map( (shop) =>\n              <ul className=\"noDec inns\">\n                <li className=\"Services\"> {shop.Name} </li>\n                <div className=\"iContent under\">\n                  <li> Owner: {shop.Owner} </li>\n                  <li> Quality: {shop.Type} </li>\n                  <li> Notes: {shop.Notes} </li>\n                </div>\n              </ul>\n            )\n            return <div> {shops} </div>\n        } else {\n            return <p> No Know Shops </p>\n        }\n}\n\nfunction Towns (props) {\n    var data = props.data.Towns;\n    console.log(data)\n\n        if (data != null) {\n\n            const towns = data.map( (town) => {\n\n              var note = town.Notes;\n\n              if (note === \"\") {\n                note = \"No Notes on this Town\"\n              }\n\n              console.log(note);\n\n              return (\n                  <ul key={town.Name} className=\"card noDec\">\n                  <div className=\"tHeader\">\n                    <li className=\"townName\"> {town.Name} </li>\n                    <li className=\"Location\"> Location: {town.Country} </li>\n                  </div>\n                  <div className=\"iContent\">\n                    <li className=\"townDesc\"> {town.Description} </li>\n                    <li className=\"townNotes\"> {note} </li>\n                  </div>\n                    <li className=\"Services\"> Inns </li>\n                    <ServicesInns data={town.Services.Inns} />\n                    <li className=\"Services\"> Shops </li>\n                    <ServicesShops data={town.Services.Stores} />\n                  </ul>\n            )\n            })\n\n\n\n            console.log(towns)\n\n            return (\n              <div> {towns} </div>\n            )\n        }\n        else {\n            return <p> Data Didnt Load! </p>\n        }\n\n}\n\nclass App extends Component {\n\n  constructor(props){\n    super();\n    this.state = ({\n      notes: []\n    })\n  }\n\n  componentDidMount() {\n    request\n      .get(\"https://api.jsonbin.io/b/5c0a79291deea01014bf1d32/latest\")\n      .set('secret-key', '$2a$10$2grg4TqBV8/1xtgERZ9Td.1qxuq4FuOXywCg073pAlFOtfNvMmqQS')\n      .then( (res) => {\n          this.setState({ notes: res.body });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n\n        </header>\n\n        <section>\n          <div className=\"container\" >\n            <Towns data={this.state.notes} />\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}